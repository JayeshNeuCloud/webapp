name: Build AMI

on:
  pull_request:
    branches:
      - main
    types: [closed]

jobs:
  build-ami:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.DB_NAME }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set Variables for Database
      env:
        PORT: ${{ secrets.PORT }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_USER: ${{ secrets.MYSQL_USER }}
        DB_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        DB_DIALECT: ${{ secrets.DB_DIALECT }}
        DB_NAME: ${{ secrets.DB_NAME }}
      run: |
        echo "PORT=$PORT" >> .env
        echo "DB_HOST=$DB_HOST" >> .env
        echo "DB_PORT=$DB_PORT" >> .env
        echo "DB_USER=$DB_USER" >> .env
        echo "DB_PASSWORD=$DB_PASSWORD" >> .env
        echo "DB_DIALECT=$DB_DIALECT" >> .env
        echo "DB_NAME=$DB_NAME" >> .env

    - name: Compress webapp
      run: zip -r webapp.zip .

    - name: Set up Node
      uses: actions/setup-node@v3
      with:
        node-version: 16

    - name: Check Versions and Install Dependencies
      run: |
        pwd
        ls -al
        node -v
        npm -v
        npm install
        ls -al

    - name: Run Integration Tests
      run: npm test

    - name: Install Packer
      run: |  
        sudo apt-get install packer

    - name: Packer Install
      run: |
        cd packer
        packer init .    


    - name: Build AMI
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_EC2 }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_EC2 }}
      run: packer build ./packer/aws-debian.pkr.hcl

########################################################################


    - name: Build Application
      id: Build_Application
      run: |
              AMI_ID=$(packer build -machine-readable packer/aws-debian.pkr.hcl | awk -F, '$0 ~/artifact,0,id/ {print $6}')
              echo "AMI ID: $AMI_ID"
              echo "AMI_ID=${AMI_ID}" >> $GITHUB_ENV


    - name: Created AMI
      run: |
        full_ami_id="${{ env.AMI_ID }}"
        region=$(echo $full_ami_id | cut -d':' -f1)
        ami_id=$(echo $full_ami_id | cut -d':' -f2)
        echo "Created AMI in region $region with AMI ID $ami_id"
        echo "AMI_REGION=$region" >> $GITHUB_ENV
        echo "AMI_ID=$ami_id" >> $GITHUB_ENV

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.DEMO_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.DEMO_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AMI_REGION }}

    - name: Update Launch Template
      run: |
        aws ec2 create-launch-template-version \
          --launch-template-id $(aws ec2 describe-launch-templates --query 'LaunchTemplates | sort_by(@, &CreateTime) | [-1].LaunchTemplateId' --output text) \
          --version-description WebVersion2 \
          --source-version 1 \
          --launch-template-data "{\"ImageId\":\"${{ env.AMI_ID }}\"}"
        echo "Latest Launch Template Version: $latest_version"
        echo "LATEST_LAUNCH_TEMPLATE_VERSION=$latest_version" >> $GITHUB_ENV

    - name: Update Auto scalling
      run: |
        latest_version=$(aws ec2 describe-launch-templates --launch-template-ids $launch_template_id --query 'LaunchTemplates[0].LatestVersionNumber' --output text) 
        LT_NAME=$(aws ec2 describe-launch-templates --query 'LaunchTemplates | sort_by(@, &CreateTime) | [-1].LaunchTemplateId' --output text) 
        autoscaling_group=$(aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[?contains(LaunchTemplate.LaunchTemplateName, '${launch_template_id}')].AutoScalingGroupName" --output text)
        echo "Launch Template Version: $latest_version"
        echo "Autoscale version: $autoscaling_group"
        aws autoscaling update-auto-scaling-group \
          --auto-scaling-group-name $autoscaling_group \
          --launch-template LaunchTemplateId=$(aws ec2 describe-launch-templates --query 'LaunchTemplates | sort_by(@, &CreateTime) | [-1].LaunchTemplateId' --output text),Version=$latest_version

    - name: Instant Refresh
      run: |
        LT_NAME=$(aws ec2 describe-launch-templates --query 'LaunchTemplates | sort_by(@, &CreateTime) | [-1].LaunchTemplateId' --output text) 
        autoscaling_group=$(aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[?contains(LaunchTemplate.LaunchTemplateName, '${launch_template_id}')].AutoScalingGroupName" --output text)
        echo "Autoscale version: $autoscaling_group"
        aws autoscaling start-instance-refresh \
          --auto-scaling-group-name $autoscaling_group



